============================= test session starts ==============================
platform linux -- Python 3.9.18, pytest-6.2.2, py-1.11.0, pluggy-0.13.1 -- /home/haddadsm/miniconda3/envs/mlflow-b31949b48e7fabe0e9f3fe8074212013880f8c7e/bin/python
cachedir: .pytest_cache
rootdir: /mnt/d/OneDrive/Desktop/samuel-haddad/cd0581-building-a-reproducible-model-workflow-exercises/lesson-3-data-validation/exercises/exercise_9/starter
collecting ... collected 1 item

test_data.py::test_kolmogorov_smirnov FAILED

=================================== FAILURES ===================================
___________________________ test_kolmogorov_smirnov ____________________________

data = (       Unnamed: 0  ...                                       text_feature
0           27919  ...                     ...ll on to Forrest Trance 
12592       34043  ...                            Lost Lands 2019 

[12593 rows x 20 columns])
ks_alpha = 0.04

    def test_kolmogorov_smirnov(data, ks_alpha):
    
        sample1, sample2 = data
    
        columns = [
            "danceability",
            "energy",
            "loudness",
            "speechiness",
            "acousticness",
            "instrumentalness",
            "liveness",
            "valence",
            "tempo",
            "duration_ms"
        ]
    
        # Bonferroni correction for multiple hypothesis testing
        # (see my blog post on this topic to see where this comes from:
        # https://towardsdatascience.com/precision-and-recall-trade-off-and-multiple-hypothesis-testing-family-wise-error-rate-vs-false-71a85057ca2b)
        alpha_prime = 1 - (1 - ks_alpha)**(1 / len(columns))
    
        for col in columns:
    
            ts, p_value = scipy.stats.ks_2samp(sample1[col], sample2[col])
    
            # NOTE: as always, the p-value should be interpreted as the probability of
            # obtaining a test statistic (TS) equal or more extreme that the one we got
            # by chance, when the null hypothesis is true. If this probability is not
            # large enough, this dataset should be looked at carefully, hence we fail
>           assert p_value > alpha_prime
E           assert nan > 0.004073878602149361

test_data.py:36: AssertionError
=============================== warnings summary ===============================
../../../../../../../../../../home/haddadsm/miniconda3/envs/mlflow-b31949b48e7fabe0e9f3fe8074212013880f8c7e/lib/python3.9/site-packages/wandb/vendor/watchdog/utils/bricks.py:175
  /home/haddadsm/miniconda3/envs/mlflow-b31949b48e7fabe0e9f3fe8074212013880f8c7e/lib/python3.9/site-packages/wandb/vendor/watchdog/utils/bricks.py:175: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    class OrderedSet(collections.MutableSet):

test_data.py: 14 warnings
  /home/haddadsm/miniconda3/envs/mlflow-b31949b48e7fabe0e9f3fe8074212013880f8c7e/lib/python3.9/site-packages/pandas/core/internals/concat.py:408: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.
  See https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)
    common_dtype = np.find_common_type(upcast_classes, [])

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED test_data.py::test_kolmogorov_smirnov - assert nan > 0.004073878602149361
======================== 1 failed, 15 warnings in 5.46s ========================
